{
  "version": 3,
  "file": "ozpIwc.timer.js",
  "sources": [
    "src/js/worker/timerThrottleUnlock.js",
    "src/js/worker/timerThrottleUnlockRunner.js"
  ],
  "names": [],
  "mappings": "AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;A;ACnEA;AACA;AACA;AACA,uD",
  "sourcesContent": [
    "var ozpIwc = ozpIwc || {};\r\nozpIwc.worker = ozpIwc.worker || {};\r\n/**\r\n * Various scripts loaded into webWorkers to enhance the IWCs performance\r\n * @module ozpIwc\r\n * @submodule ozpIwc.worker\r\n */\r\n\r\n/**\r\n * A webWorker to mock timeouts for IWC Client users. When browser tabs are inactive, timers are raised to a minimum of\r\n * 1 second. This will prevent that so that IWC Actions are not throttled. Loaded via a Blob, or through a\r\n * worker-runnable script ozpIwc.timer.js.\r\n *\r\n * Not intended to be ran in the IWC code directly, this is opened in a separate web worker.\r\n * Inspiration from MIT Licensed  https://github.com/turuslan/HackTimer.\r\n *\r\n * @namespace ozpIwc.worker\r\n * @method timerThrottleUnlock\r\n */\r\nozpIwc.worker.timerThrottleUnlock = function () {\r\n    var timerRegistrations = {};\r\n\r\n\r\n    self.addEventListener('connect', function (evt) {\r\n        var port = evt.ports[0];\r\n\r\n        port.addEventListener('message', function (evt) {\r\n            console.log(evt);\r\n            evt.data = evt.data || {};\r\n            var timer = evt.data;\r\n\r\n            // silently give up if not formatted right\r\n            if (!timer.hasOwnProperty(\"id\") || !timer.type) {\r\n                return;\r\n            }\r\n\r\n            timer.time = timer.time || 0;\r\n\r\n            //Take all requested timer types and instantiate them in the worker where inactive limits do not apply.\r\n            switch (timer.type) {\r\n                case \"setTimeout\":\r\n                    timerRegistrations[timer.id] = setTimeout(function () {\r\n                        port.postMessage(timer);\r\n                        timerRegistrations[timer.id] = null;\r\n                    }, timer.time);\r\n                    break;\r\n\r\n                case \"clearTimeout\":\r\n                    self.clearTimeout(timerRegistrations[timer.id]);\r\n                    timerRegistrations[timer.id] = null;\r\n                    break;\r\n\r\n                case \"setInterval\":\r\n                    timerRegistrations[timer.id] = self.setInterval(function () {\r\n                        port.postMessage(timer);\r\n                    }, timer.time);\r\n                    break;\r\n\r\n                case \"clearInterval\":\r\n                    self.clearInterval(timerRegistrations[timer.id]);\r\n                    timerRegistrations[timer.id] = null;\r\n                    break;\r\n            }\r\n        }, false);\r\n        port.start();\r\n\r\n    })\r\n};\r\n",
    "ozpIwc = ozpIwc || {};\r\nozpIwc.worker = ozpIwc.worker || {};\r\n\r\n(function () {ozpIwc.worker.timerThrottleUnlock();}());"
  ]
}